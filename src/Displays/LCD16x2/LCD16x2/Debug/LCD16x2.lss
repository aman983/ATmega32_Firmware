
LCD16x2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000294  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3e  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007af  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058f  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000490  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c0  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  7a:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <send_cmd>:
#define EN (1 << 5)
#define RW (1 << 6)
#define RS (1 << 7)

void send_cmd(char command){
	PORTD &= ~(RS | RW);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 73       	andi	r25, 0x3F	; 63
  86:	92 bb       	out	0x12, r25	; 18
	PORTC = command;
  88:	85 bb       	out	0x15, r24	; 21
	PORTD |= EN;
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e1       	ldi	r24, 0x1F	; 31
  92:	9e e4       	ldi	r25, 0x4E	; 78
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <send_cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <send_cmd+0x18>
  9a:	00 00       	nop
	
	_delay_ms(10);
	PORTD &= ~EN;
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret

000000a4 <send_data>:
}

void send_data(char data){
	PORTD |= RS;
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	90 68       	ori	r25, 0x80	; 128
  a8:	92 bb       	out	0x12, r25	; 18
	PORTD &= ~RW;
  aa:	92 b3       	in	r25, 0x12	; 18
  ac:	9f 7b       	andi	r25, 0xBF	; 191
  ae:	92 bb       	out	0x12, r25	; 18
	
	PORTC = data;
  b0:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= EN;
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	8f e1       	ldi	r24, 0x1F	; 31
  ba:	9e e4       	ldi	r25, 0x4E	; 78
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <send_data+0x18>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <send_data+0x1e>
  c2:	00 00       	nop
	_delay_ms(10);
	PORTD &= ~EN;
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <int_to_str>:
}

void int_to_str(uint8_t num, char *STR){
	if(num == 0){
  cc:	81 11       	cpse	r24, r1
  ce:	1c c0       	rjmp	.+56     	; 0x108 <int_to_str+0x3c>
		STR[0] = '0';
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	fb 01       	movw	r30, r22
  d4:	80 83       	st	Z, r24
		STR[1] = '\0';
  d6:	11 82       	std	Z+1, r1	; 0x01
		return;
  d8:	08 95       	ret
	}
	int i=0;
	while(num>0){
		STR[i++] = num%10 + '0';
  da:	fb 01       	movw	r30, r22
  dc:	e2 0f       	add	r30, r18
  de:	f3 1f       	adc	r31, r19
  e0:	9d ec       	ldi	r25, 0xCD	; 205
  e2:	89 9f       	mul	r24, r25
  e4:	91 2d       	mov	r25, r1
  e6:	11 24       	eor	r1, r1
  e8:	96 95       	lsr	r25
  ea:	96 95       	lsr	r25
  ec:	96 95       	lsr	r25
  ee:	59 2f       	mov	r21, r25
  f0:	55 0f       	add	r21, r21
  f2:	45 2f       	mov	r20, r21
  f4:	44 0f       	add	r20, r20
  f6:	44 0f       	add	r20, r20
  f8:	45 0f       	add	r20, r21
  fa:	84 1b       	sub	r24, r20
  fc:	80 5d       	subi	r24, 0xD0	; 208
  fe:	80 83       	st	Z, r24
		num /= 10;
 100:	89 2f       	mov	r24, r25
		STR[1] = '\0';
		return;
	}
	int i=0;
	while(num>0){
		STR[i++] = num%10 + '0';
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	02 c0       	rjmp	.+4      	; 0x10c <int_to_str+0x40>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
		STR[0] = '0';
		STR[1] = '\0';
		return;
	}
	int i=0;
	while(num>0){
 10c:	81 11       	cpse	r24, r1
 10e:	e5 cf       	rjmp	.-54     	; 0xda <int_to_str+0xe>
		STR[i++] = num%10 + '0';
		num /= 10;
	}
	STR[i] = '\0';
 110:	fb 01       	movw	r30, r22
 112:	e2 0f       	add	r30, r18
 114:	f3 1f       	adc	r31, r19
 116:	10 82       	st	Z, r1
	
	int j=0;
	i--;
 118:	c9 01       	movw	r24, r18
 11a:	01 97       	sbiw	r24, 0x01	; 1
		STR[i++] = num%10 + '0';
		num /= 10;
	}
	STR[i] = '\0';
	
	int j=0;
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
	i--;
	while(j < i){
 120:	0d c0       	rjmp	.+26     	; 0x13c <int_to_str+0x70>
		char temp = STR[j];
 122:	db 01       	movw	r26, r22
 124:	a2 0f       	add	r26, r18
 126:	b3 1f       	adc	r27, r19
 128:	4c 91       	ld	r20, X
		STR[j] = STR[i];
 12a:	fb 01       	movw	r30, r22
 12c:	e8 0f       	add	r30, r24
 12e:	f9 1f       	adc	r31, r25
 130:	50 81       	ld	r21, Z
 132:	5c 93       	st	X, r21
		STR[i] = temp;
 134:	40 83       	st	Z, r20
		j++;
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
		i--;
 13a:	01 97       	sbiw	r24, 0x01	; 1
	}
	STR[i] = '\0';
	
	int j=0;
	i--;
	while(j < i){
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	84 f3       	brlt	.-32     	; 0x122 <int_to_str+0x56>
 142:	08 95       	ret

00000144 <WR_STR>:
		j++;
		i--;
	}
}

void WR_STR(char *STR){
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	while(*STR){
 14a:	03 c0       	rjmp	.+6      	; 0x152 <WR_STR+0xe>
		send_data(*STR);
 14c:	0e 94 52 00 	call	0xa4	; 0xa4 <send_data>
		STR++;
 150:	21 96       	adiw	r28, 0x01	; 1
		i--;
	}
}

void WR_STR(char *STR){
	while(*STR){
 152:	88 81       	ld	r24, Y
 154:	81 11       	cpse	r24, r1
 156:	fa cf       	rjmp	.-12     	; 0x14c <WR_STR+0x8>
		send_data(*STR);
		STR++;
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <WR_CHR>:

void WR_CHR(char C){
	send_data(C);
 15e:	0e 94 52 00 	call	0xa4	; 0xa4 <send_data>
 162:	08 95       	ret

00000164 <WR_INT>:
}

void WR_INT(uint8_t num, char *STR){
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	eb 01       	movw	r28, r22
	int_to_str(num, STR);
 16a:	0e 94 66 00 	call	0xcc	; 0xcc <int_to_str>
	WR_STR(STR);
 16e:	ce 01       	movw	r24, r28
 170:	0e 94 a2 00 	call	0x144	; 0x144 <WR_STR>
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <DISPLAY>:

void DISPLAY(DISPLAY_SETTINGS settings){
	send_cmd(settings);
 17a:	0e 94 41 00 	call	0x82	; 0x82 <send_cmd>
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <DISPLAY+0x8>
 186:	00 c0       	rjmp	.+0      	; 0x188 <DISPLAY+0xe>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <LCD_INIT>:
	_delay_ms(2);
}

void LCD_INIT(void){
	// Setup Data Port for LCD
	DDRC = 0xFF;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x00;
 190:	12 ba       	out	0x12, r1	; 18
	
	// Setup control BUS for LCD
	DDRD = EN | RS | RW;
 192:	80 ee       	ldi	r24, 0xE0	; 224
 194:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(EN | RS | RW);
 196:	82 b3       	in	r24, 0x12	; 18
 198:	8f 71       	andi	r24, 0x1F	; 31
 19a:	82 bb       	out	0x12, r24	; 18
	send_cmd(0x38);
 19c:	88 e3       	ldi	r24, 0x38	; 56
 19e:	0e 94 41 00 	call	0x82	; 0x82 <send_cmd>
	send_cmd(0x0C);
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	0e 94 41 00 	call	0x82	; 0x82 <send_cmd>
	DISPLAY(CLEAR);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 bd 00 	call	0x17a	; 0x17a <DISPLAY>
	send_cmd(0x06);
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	0e 94 41 00 	call	0x82	; 0x82 <send_cmd>
 1b4:	08 95       	ret

000001b6 <SCROLL_TEXT>:
}

void SCROLL_TEXT(char *STR){
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	6c 01       	movw	r12, r24
	char *str_cpy = STR;
 1c6:	fc 01       	movw	r30, r24
	uint8_t str_len = 0;
 1c8:	f1 2c       	mov	r15, r1
	while(*str_cpy != '\0'){
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <SCROLL_TEXT+0x1a>
		str_cpy++;
 1cc:	31 96       	adiw	r30, 0x01	; 1
		str_len++;
 1ce:	f3 94       	inc	r15
}

void SCROLL_TEXT(char *STR){
	char *str_cpy = STR;
	uint8_t str_len = 0;
	while(*str_cpy != '\0'){
 1d0:	80 81       	ld	r24, Z
 1d2:	81 11       	cpse	r24, r1
 1d4:	fb cf       	rjmp	.-10     	; 0x1cc <SCROLL_TEXT+0x16>
		str_cpy++;
		str_len++;
	}
	
	DISPLAY(SET_CURSOR_POS_00);
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 bd 00 	call	0x17a	; 0x17a <DISPLAY>
	for(int i=0; i<str_len; i++){
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <SCROLL_TEXT+0x3a>
		WR_CHR(STR[i]);
 1e2:	f6 01       	movw	r30, r12
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	80 81       	ld	r24, Z
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <WR_CHR>
		str_cpy++;
		str_len++;
	}
	
	DISPLAY(SET_CURSOR_POS_00);
	for(int i=0; i<str_len; i++){
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	0f 2d       	mov	r16, r15
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	c0 17       	cp	r28, r16
 1f6:	d1 07       	cpc	r29, r17
 1f8:	a4 f3       	brlt	.-24     	; 0x1e2 <SCROLL_TEXT+0x2c>
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <SCROLL_TEXT+0x62>
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	81 ee       	ldi	r24, 0xE1	; 225
 202:	94 e0       	ldi	r25, 0x04	; 4
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <SCROLL_TEXT+0x4e>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <SCROLL_TEXT+0x58>
 20e:	00 00       	nop
		WR_CHR(STR[i]);
	}
	
	for(uint8_t i=0; i<str_len + 16; i++){
		_delay_ms(200);
		DISPLAY(DISPLAY_SHIFT_LEFT);
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	0e 94 bd 00 	call	0x17a	; 0x17a <DISPLAY>
	DISPLAY(SET_CURSOR_POS_00);
	for(int i=0; i<str_len; i++){
		WR_CHR(STR[i]);
	}
	
	for(uint8_t i=0; i<str_len + 16; i++){
 216:	cf 5f       	subi	r28, 0xFF	; 255
 218:	8c 2f       	mov	r24, r28
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	98 01       	movw	r18, r16
 21e:	20 5f       	subi	r18, 0xF0	; 240
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	82 17       	cp	r24, r18
 224:	93 07       	cpc	r25, r19
 226:	5c f3       	brlt	.-42     	; 0x1fe <SCROLL_TEXT+0x48>
		_delay_ms(200);
		DISPLAY(DISPLAY_SHIFT_LEFT);
	}
	DISPLAY(SET_CURSOR_POS_00);
 228:	80 e8       	ldi	r24, 0x80	; 128
 22a:	0e 94 bd 00 	call	0x17a	; 0x17a <DISPLAY>
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	ff 90       	pop	r15
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	08 95       	ret

0000023e <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "LCD.h"

int main(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	2a 97       	sbiw	r28, 0x0a	; 10
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
	uint8_t number = 255;
	char s[10];
	char *text = "Hello World";
	LCD_INIT();
 252:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_INIT>
	DISPLAY(CLEAR);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 bd 00 	call	0x17a	; 0x17a <DISPLAY>
	DISPLAY(SET_CURSOR_POS_10);
 25c:	80 ec       	ldi	r24, 0xC0	; 192
 25e:	0e 94 bd 00 	call	0x17a	; 0x17a <DISPLAY>
	WR_INT(number,s);
 262:	be 01       	movw	r22, r28
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	0e 94 b2 00 	call	0x164	; 0x164 <WR_INT>
	DISPLAY(SET_CURSOR_POS_00);
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	0e 94 bd 00 	call	0x17a	; 0x17a <DISPLAY>
    while (1) 
    {	
		SCROLL_TEXT(text);
 274:	80 e6       	ldi	r24, 0x60	; 96
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SCROLL_TEXT>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	84 e3       	ldi	r24, 0x34	; 52
 280:	9c e0       	ldi	r25, 0x0C	; 12
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x44>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x4e>
 28c:	00 00       	nop
 28e:	f2 cf       	rjmp	.-28     	; 0x274 <main+0x36>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
